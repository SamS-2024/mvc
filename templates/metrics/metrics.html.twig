{% extends "base.html.twig" %}

{% block title %}Metrics{% endblock %}

{% block body %}
    <h1>Metrics analys</h1>
    <div class="metrics">
        <h2>Introduktion</h2>

        <p>
            I denna rapport används 6C-modellen för att analysera kodkvalitet. Dessa sex begrepp hjälper till att identifiera svagheter
            och förbättringsmöjligheter i koden. Modellen fungerar som ett sätt att bedöma hur välstrukturerad, testbar och
            underhållbar koden är.
        </p>

        <h2>6C om kodkvalitet</h2>

        <h3>Codestyle</h3>
        <p>
            Kodens stil och formatering. Påverkar läsbarhet och enhetlighet. I scrutinizer fick koden ett generellt betyg
            av 10 (very good) och betyg A. Under “Issues” fanns det några stilrelaterade problem, till exempel oanvänd kod
            i 2 klasser (CardGraphic och CardGameController) på totalt 5 rader. Detta bör åtgärdas för att få bättre kodkvalitet.
        </p>

        <h3>Coverage</h3>
        <p>
            Hur stor del av koden som testas av automatiska tester. Hög täckning tyder på god testbarhet. Täckningen för hela
            projektet låg på 23 % eftersom inte alla klasser är testade. De klasser som hade enhetstester fick 100 % täckning.
        </p>

        <h3>Complexity</h3>
        <p>
            Mäter hur komplicerade metoder och klasser är. För hög komplexitet försvårar förståelse och underhåll.
            Klassen InitCardGameController hade högst komplexitet med ett värde på 35 enligt Scrutinizer, vilket bör förbättras.
            I PhpMetrics låg samma värde på 21.<br><br> Metoderna i klassen hade maxvärde 5 i båda verktyg, vilket är inom acceptabel nivå.
            En klass med låg komplexitet var CardHand, med totalvärde 5 och högst metodkomplexitet på 2. Medelvärdet på komplexitet i PhpMetrics
            låg på 3.88 för klasserna.
        </p>

        <h3>Cohesion</h3>
        <p>
            Cohesion mäter hur väl olika delar i en klass hänger ihop. Hög sammanhållning är önskvärt.
            Detta mäts med LCOM (Lack of Cohesion of Methods), där höga värden innebär låg cohesion.
            Det betyder att metoderna i klassen inte samarbetar väl. Låga värden innebär hög cohesion och att klassens innehåll hänger bättre ihop.<br><br>
            I PhpMetrics fick exempelklasserna 'ProductController' och 'ProductRepository' högsta värden på 4 respektive 3. Övriga klasser låg på 2 och 1
            vilket anses vara ok.
        </p>

        <h3>Coupling</h3>
        <p>
            Coupling mäter beroenden mellan klasser. Mindre kopplingar gör koden mer flexibel och lättare att testa.
        </p>

        <p>
            Två vanliga mått är <strong>Afferent Coupling (AC) </strong> - hur många klasser som använder en viss klass, och
            <strong> Efferent Coupling (EC) </strong> - hur många klasser en viss klass själv använder. Hög coupling gör
            systemet svårare att ändra, förstå och testa.
        </p><br><br>
        <p>
            I PhpMetrics hade flera klasser ett Afferent Coupling-värde på 3, till exempel DeckOfCards och CardHand, vilket tyder
            på att de används frekvent av andra. Två controller-klasser hade ett Efferent Coupling-värde på 8.
            För att minska coupling är det bra att se till att klasser inte är onödigt beroende av många andra klasser.
        </p><br><br>


        <h3>CRAP</h3>
        <p>
            CRAP är en kombination av komplexitet och dålig testtäckning. Ett högt CRAP-värde visar på problemområden i koden.
            I Scrutinizer hade controller-metoderna höga CRAP-värden, vilket berodde på deras storlek, komplexitet och att de saknade enhetstester.
            För att förbättra detta kan metoderna delas upp i mindre delar, eller så kan enhetstester implementeras för att täcka komplexiteten.
        </p>

        <h2>PHP Metrics</h2>

        <p>
            Denna analys täcker särskilt komplexitet, underhållbarhet, täckning (coverage) och kodkvalitet (code style/violations) enligt 6C-modellen.
        </p>

        <p>
            De tre områden som kan förbättras enligt PHP Metrics är: komplexitet och underhållsbarhet (särskilt i vissa controllers),
            låg kodtäckning för flera klasser samt ett antal kodbrott (violations) som bör ses över.<br><br>
        </p>

        <p>
            På förstasidan i PhpMetrics visas en graf med cirklar där varje cirkel representerar en fil.
            Cirkelns storlek visar cyklomatisk komplexitet medan cirkelns färg representerar underhållbarhet.
            Större cirklar innebär mer komplex kod samtidigt som färgen visar underhållbarhetsindex.
            Stora röda cirklar är ett tecken på svårunderhållen och komplex kod som bör åtgärdas.<br><br>
        </p>

        <p>
            I rapporten sticker InitCardGameController och DiceGameController ut med stora röda cirklar.
            LibraryController har en mellanstor röd cirkel. Målet är att minska cirklarnas storlek och få
            bort den röda färgen, samtidigt som underhållsbarhetsindex höjs, helst över 70. Just nu ligger
            den största cirkeln (InitCardGameController) på 65,28.
        </p><br><br>

        <p>
            PHP Metrics mäter även kohesion (LCOM) och koppling (coupling). I rapporten syns till exempel att vissa
            controllers har hög Efferent Coupling, vilket innebär att de är beroende av många andra klasser.
            Detta påverkar både testbarhet och underhåll negativt, vilket enligt 6C är relevant för Coupling. Ett exempel är
            klasserna ProductController och ProductRepository som har LCOM på 4 respektive 3.
        </p><br><br>

        <p>
            Ett Afferent Coupling-värde på 3 mättes i till exempel DeckOfCards och CardHand, vilket tyder
            på att de används frekvent av andra. Dessa är kärnklasser i applikationen. Samtidigt hade flera controllers,
            till exempel InitCardGameController och DiceGameController, ett Efferent Coupling-värde på 8 vilket
            betyder att de använder många andra klasser. Controller-klasserna anropar andra klasser,
            så det är naturligt att de använder flera klasser
        </p>

        <img src="{{ asset('img/phpmetrics.webp') }}" class="phpmetrics" alt="PhpMetrics" width="800">

        <h2>Scrutinizer</h2>

        <p>
            I Scrutinizer finns flera områden som kan förbättras. Under 'issues' finns oanvänd kod i ungefär två klasser (CardGraphic och CardGameController),
            totalt cirka 5 rader, som kan tas bort. Också antalet rader i InitCardGameControllers är över 300 och bör minskas.
            Den allmänna kodstilen fick däremot bra värden med betyget 10 och alla klasser har fått betyg A.
        </p>

         <div class="badges">
            <a href="https://scrutinizer-ci.com/g/SamS-2024/mvc/?branch=main" target="_blank">
                <img src="https://scrutinizer-ci.com/g/SamS-2024/mvc/badges/build.png?b=main" alt="Scrutinizer build">
            </a>

            <a href="https://scrutinizer-ci.com/g/SamS-2024/mvc/?branch=main" target="_blank">
                <img src="https://scrutinizer-ci.com/g/SamS-2024/mvc/badges/coverage.png?b=main" alt="Scrutinizer coverage">
            </a>

            <a href="https://scrutinizer-ci.com/g/SamS-2024/mvc/?branch=main" target="_blank">
                <img src="https://scrutinizer-ci.com/g/SamS-2024/mvc/badges/quality-score.png?b=main" alt="Scrutinizer Code Quality">
            </a>
        </div>


        <img src="{{ asset('img/scrutinizer1.webp') }}" class="phpmetrics" alt="Scrutinizer" width="800">

        <p>
            Ett tredje område är komplexiteten, som kan minskas genom att fördela koden på flera klasser eller metoder, eller genom att öka testtäckningen för dessa.
            Att dela upp koden i fler metoder, särskilt i controllers kan förbättra komplexiteten och CRAP-värdena.
            Exempelvis har metoderna 'InitCardGameController::initGameStop()' och 'InitCardGameController::handlePlayerDraw()' (nuvarande klasss är InitCardHelpers::handlePlayerDraw()) höga CRAP-värden på 30 poäng vardera.
        </p>

        <img src="{{ asset('img/scrutinizer2.webp') }}" class="phpmetrics" alt="Scrutinizer" width="800">

        <p>
            Kodraderna för InitCardGameController är för många (322), och några metoder i den klassen har många fysiska rader,
            men ingen metod har fler än 19 kodrader. De flesta av dessa rader handlar om sessioner och metodanrop.
            I bilderna nedan visas ett exempel på hur det ser ut: först alla klasser, och sedan en översikt av InitCardGameControllers
            resultat samt de två metoderna i den som har högst komplexitet och flest rader.
        </p>

        <img src="{{ asset('img/scrutinizer6.webp') }}" class="phpmetrics" alt="Scrutinizer" width="800">

         <img src="{{ asset('img/scrutinizer3.webp') }}" class="phpmetrics" alt="Scrutinizer" width="800">

         <img src="{{ asset('img/scrutinizer4.webp') }}" class="phpmetrics" alt="Scrutinizer" width="800">


        <p>
            Sammanfattningsvis visar Scrutinizer-rapporten att komplexitet (Complexity) och testtäckning (del av Coverage) är områden som behöver förbättras.
            Oanvänd kod kan tas bort för att förenkla underhållet och förbättra kodstilen. Genom att minska antalet kodrader och dela upp större metoder i mindre,
            samt införa fler enhetstester, kan både komplexitet och CRAP-värden förbättras. Det bidrar till bättre underhållbarhet och högre kodkvalitet.
        </p>

        <h2>Förbättringar</h2>

        <p>
            Baserat på analyserna från PHP Metrics och Scrutinizer har det identifierats tre huvudsakliga förbättringsområden: ta bort oanvänd kod,
            minska antalet rader och komplexitet i vissa controllers samt att öka testtäckningen. Dessa förändringar syftar till att förbättra kodkvaliteten enligt 6C-modellen.
        </p>

        <h3>1. Ta bort oanvänd kod</h3>
        <p>
            I Scrutinizer identifierades ungefär 5 rader kod som är oanvänd, bland annat i CardGraphic och CardGameController.
            Dessa ska tas bort. Det kommer att förbättra kodens läsbarhet, minska potentiell förvirring och förbättra värdet för
            “codestyle” i analysverktygen.
        </p>

        <h3>2. Minska antalet kodrader i InitCardGameController</h3>
        <p>
            Klassen InitCardGameController har över 300 rader kod, vilket gör den svår att överblicka och underhålla.
            Målet är att minska antalet rader till under 200 genom att extrahera delar av logiken till mindre hjälpfunktioner,
            flytta ansvar till andra klasser eller eventuellt skapa en ny hjälpklass. Detta påverkar inte bara kodens struktur,
            utan förbättrar också läsbarheten och kodens separation av ansvar.
        </p>

        <h3>3. Minska komplexitet i InitCardGameController</h3>
        <p>
            Klassen InitCardGameController har hög komplexitet enligt både PhpMetrics (21) och Scrutinizer (35).
            Genom att dela upp koden i metoder och minska antalet rader i klassen, kan den cyklomatiska komplexiteten minska.
            Det gör koden mer lättförståelig och lättare att testa och underhålla, vilket påverkar både “Complexity” i 6C positivt.
        </p>


        <h3>4. Öka underhållbarhetsvärdet</h3>
        <p>
            I PHP Metrics har InitCardGameController, DiceGameController, LibraryController låga underhållbarhetsvärden,
            vilket visualiseras med stora röda cirklar i översikten. Dessa ska förbättras genom att bryta upp metoder och förtydliga ansvarsfördelning.
            Målet är att höja deras “Maintainability Index” över 70, vilket gör koden mer hanterbar, minskar risken för fel och förbättrar kvaliteten enligt 6C-principerna
            för <em>Complexity</em> och <em>Clean code</em>.
        </p>

        <h2>Analys</h2>

        <h3>PHP Metrics</h3>
        <p>
            För att förbättra underhållbarheten har InitCardGameController delats upp i två filer. Hjälpmetoderna har flyttats
            till ett trait Controller/Helper och importerats i InitCardGameController. Detta resulterade i att den stora
            röda cirkeln blev gul, och underhållbarhetsindexet ökade från 65,28 till 76,92. Antalet kodrader i klassen minskade
            dessutom från 322 till under 200.
        </p>

         <img src="{{ asset('img/phpmetrics-view.webp') }}" class="phpmetrics" alt="PhpMetrics overview" width="800">

        <p>
            Metoden initGameResult har också minskats i storlek och anropar nu i stället en privat metod, preparePlayerData($player),
            som tar emot ett argument för antingen spelaren eller banken och returnerar resultatet.
        </p><br><br>

        <p>
            Inledningsvis gav användningen av ett trait upphov till en varning i PHP Metrics: "Packages should be either abstract and stable or concrete and instable."
            För att lösa detta ersattes traitet med en vanlig klass med publika metoder, som instansierades i InitCardGameController.
        </p><br><br>
        <p>
            Detta ledde dock till ett nytt problem: ett blob-fel, med meddelandet "A blob object (or 'god class') does not follow the Single Responsibility Principle."
            Ett annat alternativ som testades var att skapa mindre klasser i en Service-mapp och använda dependency injection. Det visade sig dock vara det sämsta
            alternativet av alla, då det resulterade i ett betydligt lägre underhållbarhetsindex, exempelvis endast 56 för InitCardGameController.
        </p><br><br>

        <p>
            Slutligen återgick implementationen till den ursprungliga lösningen med ett trait, men denna gång utan en undermapp, traitet ligger nu direkt i
            Controller-mappen för att undvika onödig komplexitet. Underhållbarhetsindexet är nu 77,04. Koden har dessutom kompletterats
            med kommentarer för att öka tydligheten, även om detta inte påverkade underhållbarhetsindexet.
        </p><br><br>

        <p>
            Ett testfall, testPreparePlayerData(), skapades för att testa metoden preparePlayerData() och öka kodtäckningen för klassen InitCardGameController.
            I detta test användes mocking för att isolera och verifiera metodens funktionalitet.
        </p><br><br>

        <p>
            Det har även genomförts en rensning i DiceGameController, vilket resulterade i en gul cirkel med ett underhållbarhetsindex på 70,06 och en komplexitet på 7,
             en förbättring från tidigare värden på 62,78 respektive 12.
        </p><br><br>

        <p>
            Dice-klassen hade en låg komplexitet på 1, men ett lågt underhållbarhetsindex på 59,01. Efter att en docstring, som tidigare hade glömts bort,
            lades till ökade underhållbarhetsindexet till 99,51, och den lilla cirkeln blev grön.
        </p><br><br>

        <p>
            I LibraryController har kodupprepning minskats genom att skapa flera privata metoder för att organisera koden bättre.
            En av dessa metoder placerades i ett trait som hjälpmetod. Detta bidrog till att underhållbarhetsindexet ökade från 62,26
            till 72,3, vilket resulterade i en gul cirkel.
        </p><br><br>

        <p>
            DiceHand hade initialt ett underhållbarhetsindex på 80,99 och en gul cirkel. Genom att förbättra docstrings ökade indexet till 93,48
            och cirkeln blev grön. CardGraphic organiserades om genom att minska antalet metoder, vilket förbättrade underhållbarhetsindexet från
            82,22 (gul cirkel) till 86,44 (grön cirkel).
        </p><br><br>

        <h3>Scrutinizer</h3>
        <p>
            För att följa Scrutinizer-rekommendationerna har oanvänd kod tagits bort, vilket eliminerade vissa varningar i Issues-sektionen.
            De allmänna crap-värden för metoderna ligger nu på högst 20 istället för tidigare 30.
        </p>

            <img src="{{ asset('img/crap.webp') }}" class="phpmetrics" alt="CRAP-scores" width="800">
        <p>
            CRAP-värdet för metoden InitCardHelpers::handlePlayerDraw() minskade från 30 till 12 efter att koden delades upp i två mindre metoder.
            Metoden InitCardGameController::initGameStop() refaktorerades också genom att delas upp i flera mindre metoder,
            vilket minskade dess CRAP-värde från 30 till 2.
        </p>

        <img src="{{ asset('img/method1.webp') }}" class="phpmetrics" alt="CRAP-scores" width="800">

        <img src="{{ asset('img/method2.webp') }}" class="phpmetrics" alt="CRAP-scores" width="800">

        <p>
            Kodraderna låg generellt bra till tidigare men det fanns en klass som stack ut med 322 rader (InitCardGameController)
            och som nu ligger på 191. För InitCardHelpers controll-klass blev det dock 254 rader.
        </p>

        <img src="{{ asset('img/line.webp') }}" class="phpmetrics" alt="class lines" width="800">

        <img src="{{ asset('img/lines.webp') }}" class="phpmetrics" alt="Code lines" width="800">

        <p>

            Komplexitet för InitCardGameController klassen har minskat från 35 till 18. Det är dock en komplexitet på 22 för
            InitCardHelpers klassen.

            En rensning har även genomförts i DiceGameController, vilket sänkte komplexitetsvärdet från 20 till 12 och minskade
            antalet rader från 174 till 106. Enligt PHP Metrics ligger samma klass nu på ett komplexitetsvärde på 7.
        </p>

        <h2>Diskussion</h2>

        <p>
            Att aktivt arbeta med kodkvalitet och principer som Clean Code är möjligt, men det är inte alltid enkelt,
            särskilt i större projekt eller när man arbetar med äldre kod. Genom att använda verktyg som PHP Metrics och Scrutinizer
            blir det tydligt att det finns konkreta sätt att mäta och följa upp kodkvalitet, vilket kan hjälpa till att identifiera
            förbättringsområden. I detta kurmoment har många klasser och metoder förbättrats avsevärt, även om flera mätvärden fortfarande
            ligger på en gul nivå. Det är ändå en tydlig förbättring jämfört med tidigare versioner.
        </p><br><br>

        <p>
            En tydlig nackdel som upplevts är att det har varit svårt att förbättra all kod samtidigt. Det finns kod från flera tidigare kursmoment,
            och det hade varit lättare att arbeta strukturerat med kvalitet om man fått öva på ett mindre projekt i taget. Att ha tillgång till exempel på hur
            "bra kod" bör se ut i en mer komplex controller hade också varit till stor hjälp. För vissa klasser var det dessutom riskabelt att göra för stora
            förändringar, då det saknades tillräcklig testtäckning för att känna sig trygg med att inget gick sönder.
        </p><br><br>

        <p>
            Kodtäckning har bara implementerats i delar där det uttryckligen krävdes, främst på grund av tidsbrist och bristande erfarenhet kring hur man testar controllers.
            Ett försök gjordes att använda mocking för att testa en controller, men det visar att det behövs mer handledning kring just testning i PHP, särskilt med fokus
            på mocking och struktur i controllerklasser.
        </p><br><br>

        <p>
            Överlag har upplevelsen varit något överväldigande. Verktygen visade på brister som inte var uppenbara vid en första anblick, särskilt i kod som man själv upplevde som "fungerande".
            Det fanns mycket gammal kod att gå igenom, vilket gjorde det svårt att förbättra utan att riskera nya problem. Det är tydligt att dessa verktyg fungerar bäst när man
            jobbar med ett uppdrag eller en modul i taget, där man kan fokusera på kvalitet redan från början.
        </p><br><br>

        <p>
            Slutligen har verktygen upplevts som både hjälpsamma och ibland överdrivna. Det har varit tidskrävande att arbeta sig igenom alla varningar och mätvärden, och det är inte alltid uppenbart hur
            förbättringar enligt verktygens måttstock faktiskt leder till mer läsbar eller bättre kod. Därför väcks också frågan om det inte borde finnas andra sätt att mäta och förstå clean code, exempelvis
            med hjälp av kodgranskningar, erfarenhetsbaserade riktlinjer eller tydligare exempel på god praxis.
        </p><br><br>

        <p>
            Avslutningsvis har arbetet med att förbättra kodkvalitet och struktur i detta kurmoment har visat sig både lärorikt och utmanande. Genom att använda verktyg som PHP Metrics och Scrutinizer har flera konkreta förbättringar
            genomförts, bland annat reducerad komplexitet och högre underhållbarhetsindex i flera klasser. Det har samtidigt blivit tydligt att det krävs både tid, vana och ett mer strategiskt arbetssätt för att kunna uppnå
            riktigt god kodkvalitet i större kodbaser.
        </p><br><br>

        <p>
            Även om alla mål inte nåddes fullt ut, har kursmomentet gett en tydligare förståelse för clean code-principer och vikten av kontinuerlig kodgranskning. Erfarenheterna från detta arbete kan tas med i framtida projekt,
            där verktygen kan användas mer effektivt om de integreras redan från början.
        </p>


    </div>

{% endblock %}
